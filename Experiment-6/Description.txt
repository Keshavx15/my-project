The Interactive SVG Drawing Tool is a simple yet powerful web-based application that allows users to draw on an SVG canvas using their mouse.
It relies on JavaScript DOM manipulation and event handling to provide real-time drawing functionality.

Unlike raster-based canvases that operate on pixels, SVG (Scalable Vector Graphics) works with vector elements such as <line>, <circle>, <rect>, or <polyline>.
This makes the drawings scalable without losing quality and allows them to be manipulated as individual DOM elements.

The main purpose of this project is to demonstrate how mouse events like mousedown, mousemove, and mouseup can be used to create interactive features.
It also shows how SVG elements can be dynamically generated and styled using JavaScript.

1. The HTML provides the skeleton of the project. It consists of three main parts:

 -: Container (<div class="wrap">)
     
     Wraps the entire drawing tool 
     giving it a neat border and heading.

 -: Toolbar 
     
     Includes input controls for customizing the drawing:
     A color picker (<input type="color">) to choose stroke color.
     A width input (<input type="number">) to select line thickness.
     A clear button to reset the drawing board.

  -:SVG Drawing Board (<svg>)

     This is the main drawing area.
     Acts as a "canvas" where the mouse events are tracked.
     Every time the user draws, new <polyline> elements are appended inside this SVG.

2. CSS Styling
  
   -:Container Styles
      Borders around the drawing tool make it visually distinct.
  
   -:Toolbar Layout
      
      Flexbox arranges the inputs neatly in a row.
      Labels ensure clarity for color and width settings.
   
   -:Drawing Area (.frame)
   
      Has a light-gray background to mimic a drawing canvas.
      Fixed size (740px Ã— 420px) with a border to define the boundaries.

3. JavaScript functionality 

   The first step is to access the important HTML elements using document.getElementById:
      *The SVG board (board).
      *The color input (color).
      *The width input (width).
      *The clear button (clear).
   These references are stored in variables so that they can be used later in event handling.  

4.  JavaScript Events
 
  *mousedown
     When the user presses the mouse button inside the SVG:
    - drawing is set to true.
    - A new <polyline> is created using document.createElementNS (SVG requires a namespace).
    - Stroke color and width are set from the toolbar inputs.
    - First point is recorded from mouse position.
    - Polyline is added to the SVG canvas.
    - Drawing begins.
  
  *mousemove
    While the mouse is held down and moved:
    - Current mouse position is calculated.
    - New position is added to the points attribute of the polyline.
    - Polyline grows continuously, creating a freehand drawing effect.
 
  *mouseup and mouseleave
    - On mouseup: Drawing stops, polyline is complete.
    - On mouseleave: Drawing stops to prevent unintended strokes.
    - Ensures smooth interaction and avoids artifacts.

5.   Learning Outcomes    
   
    - Understand the difference between raster and vector graphics (SVG).
    - Learn how to use mouse events (mousedown, mousemove, mouseup, mouseleave) for interactivity.
    - Create and manipulate SVG elements dynamically using JavaScript.
    - Build a complete drawing tool using HTML, CSS, and JavaScript.
